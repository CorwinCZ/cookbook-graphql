# source: https://eu1.prisma.sh/petr-canek-398ab8/cookbook-orm/dev
# timestamp: Thu Jul 26 2018 16:05:22 GMT+0200 (CEST)

type AggregateIngredient {
  count: Int!
}

type AggregateRecepie {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Ingredient implements Node {
  id: ID!
  recepie(where: RecepieWhereInput): Recepie!
  name: String!
  amount: Float
  unit: String
}

"""A connection to a list of items."""
type IngredientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  name: String!
  amount: Float
  unit: String
  recepie: RecepieCreateOneWithoutIngredientListInput!
}

input IngredientCreateManyWithoutRecepieInput {
  create: [IngredientCreateWithoutRecepieInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateWithoutRecepieInput {
  name: String!
  amount: Float
  unit: String
}

"""An edge in a connection."""
type IngredientEdge {
  """The item at the end of the edge."""
  node: Ingredient!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  amount_ASC
  amount_DESC
  unit_ASC
  unit_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type IngredientPreviousValues {
  id: ID!
  name: String!
  amount: Float
  unit: String
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
}

input IngredientUpdateInput {
  name: String
  amount: Float
  unit: String
  recepie: RecepieUpdateOneWithoutIngredientListInput
}

input IngredientUpdateManyWithoutRecepieInput {
  create: [IngredientCreateWithoutRecepieInput!]
  connect: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  delete: [IngredientWhereUniqueInput!]
  update: [IngredientUpdateWithWhereUniqueWithoutRecepieInput!]
  upsert: [IngredientUpsertWithWhereUniqueWithoutRecepieInput!]
}

input IngredientUpdateWithoutRecepieDataInput {
  name: String
  amount: Float
  unit: String
}

input IngredientUpdateWithWhereUniqueWithoutRecepieInput {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateWithoutRecepieDataInput!
}

input IngredientUpsertWithWhereUniqueWithoutRecepieInput {
  where: IngredientWhereUniqueInput!
  update: IngredientUpdateWithoutRecepieDataInput!
  create: IngredientCreateWithoutRecepieInput!
}

input IngredientWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  recepie: RecepieWhereInput
}

input IngredientWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createRecepie(data: RecepieCreateInput!): Recepie!
  createIngredient(data: IngredientCreateInput!): Ingredient!
  updateRecepie(data: RecepieUpdateInput!, where: RecepieWhereUniqueInput!): Recepie
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  deleteRecepie(where: RecepieWhereUniqueInput!): Recepie
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  upsertRecepie(where: RecepieWhereUniqueInput!, create: RecepieCreateInput!, update: RecepieUpdateInput!): Recepie!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  updateManyRecepies(data: RecepieUpdateInput!, where: RecepieWhereInput): BatchPayload!
  updateManyIngredients(data: IngredientUpdateInput!, where: IngredientWhereInput): BatchPayload!
  deleteManyRecepies(where: RecepieWhereInput): BatchPayload!
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  recepies(where: RecepieWhereInput, orderBy: RecepieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recepie]!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  recepie(where: RecepieWhereUniqueInput!): Recepie
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  recepiesConnection(where: RecepieWhereInput, orderBy: RecepieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecepieConnection!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Recepie implements Node {
  id: ID!
  name: String!
  ingredientList(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
  description: String
  directions: String
  preparationTime: Int
  serves: Int
}

"""A connection to a list of items."""
type RecepieConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecepieEdge]!
  aggregate: AggregateRecepie!
}

input RecepieCreateInput {
  name: String!
  description: String
  directions: String
  preparationTime: Int
  serves: Int
  ingredientList: IngredientCreateManyWithoutRecepieInput
}

input RecepieCreateOneWithoutIngredientListInput {
  create: RecepieCreateWithoutIngredientListInput
  connect: RecepieWhereUniqueInput
}

input RecepieCreateWithoutIngredientListInput {
  name: String!
  description: String
  directions: String
  preparationTime: Int
  serves: Int
}

"""An edge in a connection."""
type RecepieEdge {
  """The item at the end of the edge."""
  node: Recepie!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RecepieOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  directions_ASC
  directions_DESC
  preparationTime_ASC
  preparationTime_DESC
  serves_ASC
  serves_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RecepiePreviousValues {
  id: ID!
  name: String!
  description: String
  directions: String
  preparationTime: Int
  serves: Int
}

type RecepieSubscriptionPayload {
  mutation: MutationType!
  node: Recepie
  updatedFields: [String!]
  previousValues: RecepiePreviousValues
}

input RecepieSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RecepieSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecepieSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecepieSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RecepieWhereInput
}

input RecepieUpdateInput {
  name: String
  description: String
  directions: String
  preparationTime: Int
  serves: Int
  ingredientList: IngredientUpdateManyWithoutRecepieInput
}

input RecepieUpdateOneWithoutIngredientListInput {
  create: RecepieCreateWithoutIngredientListInput
  connect: RecepieWhereUniqueInput
  delete: Boolean
  update: RecepieUpdateWithoutIngredientListDataInput
  upsert: RecepieUpsertWithoutIngredientListInput
}

input RecepieUpdateWithoutIngredientListDataInput {
  name: String
  description: String
  directions: String
  preparationTime: Int
  serves: Int
}

input RecepieUpsertWithoutIngredientListInput {
  update: RecepieUpdateWithoutIngredientListDataInput!
  create: RecepieCreateWithoutIngredientListInput!
}

input RecepieWhereInput {
  """Logical AND on all given filters."""
  AND: [RecepieWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecepieWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecepieWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  directions: String

  """All values that are not equal to given value."""
  directions_not: String

  """All values that are contained in given list."""
  directions_in: [String!]

  """All values that are not contained in given list."""
  directions_not_in: [String!]

  """All values less than the given value."""
  directions_lt: String

  """All values less than or equal the given value."""
  directions_lte: String

  """All values greater than the given value."""
  directions_gt: String

  """All values greater than or equal the given value."""
  directions_gte: String

  """All values containing the given string."""
  directions_contains: String

  """All values not containing the given string."""
  directions_not_contains: String

  """All values starting with the given string."""
  directions_starts_with: String

  """All values not starting with the given string."""
  directions_not_starts_with: String

  """All values ending with the given string."""
  directions_ends_with: String

  """All values not ending with the given string."""
  directions_not_ends_with: String
  preparationTime: Int

  """All values that are not equal to given value."""
  preparationTime_not: Int

  """All values that are contained in given list."""
  preparationTime_in: [Int!]

  """All values that are not contained in given list."""
  preparationTime_not_in: [Int!]

  """All values less than the given value."""
  preparationTime_lt: Int

  """All values less than or equal the given value."""
  preparationTime_lte: Int

  """All values greater than the given value."""
  preparationTime_gt: Int

  """All values greater than or equal the given value."""
  preparationTime_gte: Int
  serves: Int

  """All values that are not equal to given value."""
  serves_not: Int

  """All values that are contained in given list."""
  serves_in: [Int!]

  """All values that are not contained in given list."""
  serves_not_in: [Int!]

  """All values less than the given value."""
  serves_lt: Int

  """All values less than or equal the given value."""
  serves_lte: Int

  """All values greater than the given value."""
  serves_gt: Int

  """All values greater than or equal the given value."""
  serves_gte: Int
  ingredientList_every: IngredientWhereInput
  ingredientList_some: IngredientWhereInput
  ingredientList_none: IngredientWhereInput
}

input RecepieWhereUniqueInput {
  id: ID
}

type Subscription {
  recepie(where: RecepieSubscriptionWhereInput): RecepieSubscriptionPayload
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
}
